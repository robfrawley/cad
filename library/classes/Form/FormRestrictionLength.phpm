<?php
/**
 * Moin
 * @package moin-base
 *
 * @author Rob Frawley <code AT robfrawley DOT com>
 * @license GNU Public License <http://www.gnu.org/licenses/gpl.txt>
 *
 * @version $Id: FormRestrictionLength.phpm 168 2007-10-07 03:01:46Z rmf $
 */

/**#@+
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; only version 2
 * of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * restriction on password length
 *
 * @package moin-base
 * @subpackage moin-library
 */
class FormRestrictionLength extends FormRestriction {
  /**
   * max field length
   *
   * @var integer
   */
	protected $_restriction_2;

	/**
	 * constructor
   *
	 * @param string $regex
	 * @param string $message
	 */
	public function __construct($min_length = 0, $max_length = 0)
  {
		if($min_length === 0 && is_int($max_length))
    {
			parent::__construct(0, 'Entry must be less than '.$max_length.' characters.');
		} 
    elseif($min_length == 1 && $max_length == 0)
    {
			parent::__construct($min_length, 'This field cannot be empty.');
		}
    elseif(is_int($min_length) && $max_length === 0)
    {
			parent::__construct($min_length, 'Entry must be greater than '.$min_length.' characters.');
		}
    elseif(is_int($min_length) && is_int($max_length))
    {
			parent::__construct($min_length, 'Entry must be between '.$min_length.' and '.$max_length.' characters.');
		} 
    $this->_restriction_2 = $max_length;
	}

	/**
	 * check for met restriction
	 * @return void
	 */
	function _meetsRestriction($string) {
		if($this->_restriction === 0 && is_int($this->_restriction_2)) {
			if(strlen($string) > $this->_restriction_2) {
				return false;
			} else {
				return true;
			}
		} elseif(is_int($this->_restriction) && $this->_restriction_2 === 0) {
			if(strlen($string) < $this->_restriction) {
				return false;
			} else {
				return true;
			}
		} elseif(is_int($this->_restriction) && is_int($this->_restriction_2)) {
			if(strlen($string) < $this->_restriction || strlen($string) > $this->_restriction_2) {
				return false;
			} else {
				return true;
			}
		}
		return true;
	}
}
?>
