<?php
/**
 * Moin
 * @package moin-base
 *
 * @author Rob Frawley <code AT robfrawley DOT com>
 * @license GNU Public License <http://www.gnu.org/licenses/gpl.txt>
 *
 * @version $Id$
 */

/**#@+
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; only version 2
 * of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * generic database result class
 *
 * @package moin-base
 * @subpackage moin-library
 */
class DatabaseResult
{
  /**
   * result array
   * @var array
   */
  protected $_result = array();

  /**
   * results row index
   * @var int
   */
  protected $_row_index = 0;

  /**
   * current results row index
   * @var int
   */
  protected $_curr_index = 0;

  /**
   * have all the results been obtained
   * @var bool
   */
  protected $_done = false;

  /**
   * database statement class
   * @var DatabaseStatement
   */
  protected $_DatabaseStatement;

  /**
   * sets member vars
   * @param DatabaseStatmanet $stmt
   */
  public function __construct(DatabaseStatement $DatabaseStatement)
  {
    $this->_DatabaseStatement = $DatabaseStatement;
    return;
  }

  /**
   * return result columb for current row
   * @param string $var
   * @return string
   */
  public function __get($var)
  {
    if(is_array($this->_result[$this->_curr_index]) === false || array_key_exists($var, $this->_result[$this->_curr_index]) === false)
    {
      return (string)'';
    }
    return (string)$this->_result[$this->_curr_index][$var];
  }

  /**
   * gets first row of results from database
   * @return DatabaseResult
   */
  public function first()
  {
    if(! is_array($this->_result) || sizeof($this->_result) === 0)
    {
      $this->_result[$this->_row_index++] = $this->_DatabaseStatement->resultAssociativeArray();
    }
    $this->_curr_index = 0;
    return (object)$this;
  }

  /**
   * gets last row of results from database
   * @return DatabaseResult
   */
  public function last()
  {
    if($this->_done === false)
    {
      array_push($this->_result, $this->_DatabaseStatement->resultAllAssociativeArray());
    }
    $this->_done = true;
    $this->_curr_index = $this->_row_index = (count($this->_result) - 1);
    return (object)$this;
  }

  /**
   * gets each row sequentially from database
   * @return DatabaseResult
   */
  public function next()
  {
    if($this->_done === true)
    {
      return false;
    }
    $offset = $this->_curr_index + 1;
    if(! isset($this->_result[$offset]) )
    {
      $row = $this->_DatabaseStatement->resultAssociativeArray();
      if(! $row)
      {
        $this->_done = true;
        return false;
      }
      $this->_result[$offset] = $row;
      ++$this->_row_index;
      ++$this->_curr_index;
      return (object)$this;
    } else {
      ++$this->_curr_index;
      return (object)$this;
    }
  }

	/**
	 * gets previouse row from database
	 * @return mixed
	 */
	public function prev()
  {
    if($this->_curr_index === 0) {
      return false;
    }
    --$this->_curr_index;
    return (object)$this;
  }

  /**
   * boolean response
   * @return bool
   */
  public function isBoolean()
  {
    return (boolean)$this->_DatabaseStatement->isBoolean();
  }

  /**
   * resource response
   * @return bool
   */
  public function isObject()
  {
    return (boolean)$this->_DatabaseStatement->isObject();
  }

  /**
   * check for successful query
   * @return bool
   */
  public function isSuccess()
  {
    return (boolean)$this->_DatabaseStatement->isSuccess();
  }

  /**
   * affected rows
   * @return int
   */
  public function affectedRows()
  {
	  return (integer)$this->_DatabaseStatement->affectedRows();
  }

	/**
	 * insert id
	 * @return int
	 */
	public function insertId()
	{
		return (integer)$this->_DatabaseStatement->insertId();
	}

	/**
	 * gets number of rows returned
	 * @return int
	 */
	public function numRows()
	{
		return (integer)$this->_DatabaseStatement->numRows();
	}

}
?>
