<?php
/**
 * Moin
 * @package moin-base
 *
 * @author Rob Frawley <code AT robfrawley DOT com>
 * @license GNU Public License <http://www.gnu.org/licenses/gpl.txt>
 *
 * @version $Id$
 */

/**#@+
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; only version 2
 * of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * mysqli statement class
 *
 * @package moin-base
 * @subpackage moin-library
 */
class DatabaseMysqliStatement extends DatabaseStatement
{
  /**
   * calls parent constructor
   * @param resource $resource
   * @param string $query
   * @param array $tables
   * @return void
   */
  public function __construct($resource, $query, $tables = array())
  {
    parent::__construct($resource, $query, $tables);
    return;
  }

  /**
   * execute sql query and return DatabaseGenericResult resource
   * @return DatabaseResult
   */
  protected function _executeQuery()
  {
    //echo $this->_parsed_query;
    $this->_result_resource = @mysqli_query($this->_resource, $this->_parsed_query);
    if(is_object($this->_result_resource) === false && is_bool($this->_result_resource) === false)
    {
      throw new ExceptionDatabaseQuery($this->_resource);
    }
    return (object)new DatabaseResult($this);
  }

  /**
   * result row
   * @return string
   */
  public function resultRow()
  {
    if(is_object($this->_result_resource) === false)
    {
      throw new ExceptionDatabaseResult('cannot fetch row from boolean result');
    }
    return (string)mysqli_fetch_row($this->_result_resource);
  }

  /**
   * result associative array
   * @return array
   */
  public function resultAssociativeArray()
  {
    if(! is_object($this->_result_resource))
    {
      throw new ExceptionDatabaseResult('cannot fetch associative array from boolean result');
    }
    return (array)mysqli_fetch_assoc($this->_result_resource);
  }

  /**
   * all results associative array
   * @return array
   */
  public function resultAllAssociativeArray()
  {
    $results = array();
    while(($row = $this->resultAssociativeArray()) == true)
    {
      array_push($results, $row);
    }
    return (array)$results;
  }

  /**
   * result array
   * @return array
   */
  public function resultArray()
  {
    if(is_object($this->_result_resource) === false)
    {
      throw new ExceptionDatabaseResult('cannot fetch array from boolean result');
    }
    return (array)mysqli_fetch_array($this->_result_resource);
  }

  /**
   * result rows
   * @return int
   */
  public function numRows()
  {
    if(is_object($this->_result_resource) === false)
    {
      throw new ExceptionDatabaseResult('cannot num row from boolean result');
    }
    return (integer)mysqli_num_rows($this->_result_resource);
  }

  /**
   * affected rows
   * @return int
   */
  public function affectedRows()
  {
    if(is_bool($this->_result_resource) === false)
    {
      throw new ExceptionDatabaseResult('cannot retrieve affected rows from resource result');
    }
    return (integer)mysqli_affected_rows($this->_resource);
  }

  /**
   * insert id
   * @return int
   */
  public function insertId()
  {
    if(is_bool($this->_result_resource) === false) {
      throw new ExceptionDatabaseResult('cannot retrieve insert id from resource result');
    }
    return (integer)mysqli_insert_id($this->_resource);
  }

  /**
   * boolean response
   * @return bool
   */
  public function isBoolean()
  {
    if(is_bool($this->_stmt->resultResource()) === true)
    {
      return (bool)true;
    } else {
      return (bool)false;
    }
  }

  /**
   * resource response
   * @return bool
   */
  public function isObject()
  {
    if(is_object($this->resultResource()) === true)
    {
      return (bool)true;
    } else {
      return (bool)false;
    }
  }

  /**
   * check for successful query
   * @return bool
   */
  public function isSuccess()
  {
    if($this->isObject() === true || $this->resultResource() === true)
    {
      return (bool)true;
    } else {
      return (bool)false;
    }
  }

  /**
   * result resource
   * @return resource
   */
  public function resultResource()
  {
    return $this->_result_resource;
  }

  /**
   * resource
   * @return resource
   */
  public function resource()
  {
    return $this->_resource;
  }
}
?>
